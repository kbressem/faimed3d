# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/05b_models.deeplabv3.ipynb (unless otherwise specified).

__all__ = ['ASPPConv', 'ASPPPooling', 'ASPP', 'Decoder', 'DeepLab']

# Cell
# export
from fastai.basics import *
from fastai.layers import *
from warnings import warn
from .modules import Sequential_
from .resnet import *

# Cell
class ASPPConv(nn.Sequential):
    def __init__(self, in_channels, out_channels, dilation, norm_layer):
        modules = [
            nn.Conv3d(in_channels, out_channels, 3, padding=dilation, dilation=dilation, bias=False),
            norm_layer(out_channels),
            nn.ReLU()
        ]
        super(ASPPConv, self).__init__(*modules)


class ASPPPooling(nn.Sequential):
    def __init__(self, in_channels, out_channels, norm_layer):
        super(ASPPPooling, self).__init__(
            nn.AdaptiveAvgPool3d(1),
            nn.Conv3d(in_channels, out_channels, 1, bias=False),
            norm_layer(out_channels),
            nn.ReLU())

    def forward(self, x):
        size = x.shape[-3:]
        for mod in self:
            x = mod(x)
        return F.interpolate(x, size=size, mode='trilinear', align_corners=False)


class ASPP(nn.Module):
    def __init__(self, in_channels, dilations, out_channels=256, norm_layer=nn.BatchNorm3d):
        super(ASPP, self).__init__()
        modules = []
        modules.append(nn.Sequential(
            nn.Conv3d(in_channels, out_channels, 1, bias=False),
            norm_layer(out_channels),
            nn.ReLU()))

        dilations = tuple(dilations)
        for dilation in dilations:
            modules.append(ASPPConv(in_channels, out_channels, dilation, norm_layer))

        modules.append(ASPPPooling(in_channels, out_channels, norm_layer))

        self.convs = nn.ModuleList(modules)

        self.project = nn.Sequential(
            nn.Conv3d(len(self.convs) * out_channels, out_channels, 1, bias=False),
            norm_layer(out_channels),
            nn.ReLU(),
            nn.Dropout(0.5))

    def forward(self, x):
        res = []
        for conv in self.convs:
            res.append(conv(x))
        res = torch.cat(res, dim=1)
        return self.project(res)

# Cell
class Decoder(nn.Module):
    def __init__(self, num_classes, low_level_inplanes, norm_layer=nn.BatchNorm3d):
        super(Decoder, self).__init__()


        self.conv1 = nn.Conv3d(low_level_inplanes, 48, 1, bias=False)
        self.bn1 = norm_layer(48)
        self.relu = nn.ReLU()
        self.last_conv = nn.Sequential(nn.Conv3d(304, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                       norm_layer(256),
                                       nn.ReLU(),
                                       nn.Dropout(0.5),
                                       nn.Conv3d(256, 256, kernel_size=3, stride=1, padding=1, bias=False),
                                       norm_layer(256),
                                       nn.ReLU(),
                                       nn.Dropout(0.1),
                                       nn.Conv3d(256, num_classes, kernel_size=1, stride=1))
        self._init_weight()


    def forward(self, x, low_level_feat):
        low_level_feat = self.conv1(low_level_feat)
        low_level_feat = self.bn1(low_level_feat)
        low_level_feat = self.relu(low_level_feat)

        x = F.interpolate(x, size=low_level_feat.size()[2:], mode='trilinear', align_corners=True)
        x = torch.cat((x, low_level_feat), dim=1)
        x = self.last_conv(x)

        return x

    def _init_weight(self):
        for m in self.modules():
            if isinstance(m, nn.Conv3d):
                torch.nn.init.kaiming_normal_(m.weight)
     #       elif isinstance(m, SynchronizedBatchNorm2d):
     #           m.weight.data.fill_(1)
     #           m.bias.data.zero_()
            elif isinstance(m, nn.BatchNorm3d):
                m.weight.data.fill_(1)
                m.bias.data.zero_()

# Cell
class DeepLab(nn.Module):
    def __init__(self, backbone=resnet101_3d, output_stride=16, num_classes=4, n_channels=3,
                 norm_layer=nn.BatchNorm3d):
        super(DeepLab, self).__init__()

        self.backbone = build_backbone(resnet101_3d, output_stride, norm_layer, n_channels)
        self.aspp = ASPP(in_channels=2048, dilations=[1, 12, 24, 36], out_channels=256, norm_layer=norm_layer)
        self.decoder = Decoder(num_classes, 256, norm_layer)
        self.act = nn.Softmax(dim = 1)

    def forward(self, input):
        _, low_level_feat, _, _, x = self.backbone(input)
        x = self.aspp(x)
        x = self.decoder(x, low_level_feat)
        x = self.act(x)
        x = F.interpolate(x, size=input.size()[2:], mode='trilinear', align_corners=True)

        return x