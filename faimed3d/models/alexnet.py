# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/06a_models.alexnet.ipynb (unless otherwise specified).

__all__ = ['AlexNet']

# Cell
# export
import torch
from torch import nn

# Cell
class AlexNet(nn.Module):

    def __init__(self, in_channels=3, num_classes=3):
        super(AlexNet3D, self).__init__()

        self.layer1 = self.block(in_channels, 64, kernel_size=11, stride=(1,4,4), padding=2, pool = True)
        self.layer2 = self.block(64, 192, kernel_size=5, stride=1, padding=2, pool = True)
        self.layer3 = self.block(192, 384, kernel_size=3, stride=1, padding=1)
        self.layer4 = self.block(384, 256, kernel_size=3, stride=1, padding=1)
        self.layer5 = self.block(256, 256, kernel_size=3, stride=1, padding=1, pool = True)

        self.avgpool = nn.AdaptiveAvgPool3d((1,6,6))
        self.classifier = nn.Sequential(
            nn.Dropout(),
            nn.Linear(256 * 6 * 6, 4096),
            nn.ReLU(inplace=True),
            nn.Dropout(),
            nn.Linear(4096, 4096),
            nn.ReLU(inplace=True),
            nn.Linear(4096, num_classes),
        )


    def block(self, in_channels, out_channels, kernel_size, stride, padding, pool = False):
        block = nn.Sequential(nn.Conv3d(in_channels, out_channels, kernel_size, stride, padding),
                              nn.ReLU(inplace=True))
        return block if not pool else nn.Sequential(block, nn.MaxPool3d(kernel_size=3, stride=(1,2,2)))

    def encoder(self, x):
        x1 = self.layer1(x)
        x2 = self.layer2(x1)
        x3 = self.layer3(x2)
        x4 = self.layer4(x3)
        x5 = self.layer5(x4)
        return x1, x2, x3, x4, x5

    def forward(self, x):
        _, _, _, _, x = self.encoder(x)
        x = self.avgpool(x)
        x = torch.flatten(x, 1)
        x = self.classifier(x)
        return x