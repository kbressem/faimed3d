# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/05c_models.DynamicUnet.ipynb (unless otherwise specified).

__all__ = ['Mish', 'DoubleConv', 'DoubleResBlock', 'Down', 'Up', 'OutConv', 'OutDuoubleRes', 'AbstractUNet3D',
           'UResNet3D', 'UResNet3D_2', 'DoubleUNet3D', 'FPN', 'UneXt50', 'TinyUNet']

# Cell
# export
from fastai.basics import *
from fastai.vision.all import *
from .resnet import *
from fastai.vision.models.unet import DynamicUnet, _get_sz_change_idxs

# Cell
# export
from fastai.basics import *
from fastai.layers import *
import torchvision, torch
from warnings import warn

# Cell
# export
from fastai.basics import *
from fastai.layers import *
import torchvision, torch
from warnings import warn
from .resnet import *
from .deeplabv3 import *

# Cell
class Mish(nn.Module):
    def __init__(self, *args, **kwargs):
        super().__init__()

    def forward(self, x):
        #inlining this saves 1 second per epoch (V100 GPU) vs having a temp x and then returning x(!)
        return x *( torch.tanh(F.softplus(x)))

# Cell
class DoubleConv(nn.Module):
    """(convolution => [BN] => ReLU) * 2"""

    def __init__(self, in_channels, out_channels, mid_channels=None,
                 norm_layer=nn.BatchNorm3d, act=nn.ReLU):
        super().__init__()
        if not mid_channels:
            mid_channels = out_channels
        self.double_conv = nn.Sequential(
            nn.Conv3d(in_channels, mid_channels, kernel_size=3, padding=1),
            norm_layer(mid_channels),
            act(inplace=True),
            nn.Conv3d(mid_channels, out_channels, kernel_size=3, padding=1),
            norm_layer(out_channels),
            act(inplace=True)
        )

    def forward(self, x):
        return self.double_conv(x)


# Cell
class DoubleResBlock(nn.Module):

    def __init__(self, in_channels, out_channels, mid_channels=None,
                 norm_layer=nn.BatchNorm3d, act=nn.ReLU):
        super().__init__()

        if not mid_channels:
            mid_channels = in_channels//2

        self.res_block = nn.Sequential(
            # 1st Block
            nn.Conv3d(in_channels, mid_channels, kernel_size = 1, stride = 1, bias = False),
            norm_layer(mid_channels, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True),
            act(inplace=True),

            nn.Conv3d(mid_channels, mid_channels, kernel_size = 3, stride = 1, padding = 1, bias = False, groups = 4),
            norm_layer(mid_channels, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True),
            act(inplace=True),

            nn.Conv3d(mid_channels, mid_channels, kernel_size = 1, stride = 1, bias = False),
            norm_layer(mid_channels, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True),
            act(inplace=True),


            # 2nd Block
            nn.Conv3d(mid_channels, out_channels, kernel_size = 1, stride = 1, bias = False, groups = 16),
            norm_layer(out_channels, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True),
            act(inplace=True),

            nn.Conv3d(out_channels, out_channels, kernel_size = 3, stride = 1, padding = 1, bias = False, groups = 16),
            norm_layer(out_channels, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True),
            act(inplace=True),

            nn.Conv3d(out_channels, out_channels, kernel_size = 1, stride = 1, bias = False),
            norm_layer(out_channels, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )

    def forward(self, x):
        return self.res_block(x)

# Cell
class Down(nn.Module):
    """Downscaling with maxpool then resblock"""

    def __init__(self, in_channels, out_channels, block=DoubleConv,
                 norm_layer=nn.BatchNorm3d, act=nn.ReLU):
        super().__init__()
        self.maxpool_conv = nn.Sequential(
            nn.MaxPool3d(kernel_size = (1, 2, 2)),
            block(in_channels, out_channels,
                  norm_layer=norm_layer, act=act)
        )

    def forward(self, x):
        return self.maxpool_conv(x)

# Cell
class Up(nn.Module):
    """Upscaling then double conv"""

    def __init__(self, in_channels_1, in_channels_2, out_channels = None, trilinear=True,
                 block=DoubleConv, norm_layer=nn.BatchNorm3d, act=nn.ReLU):
        super().__init__()

        if out_channels is None: out_channels = in_channels_1 // 2
        if trilinear:
            self.up = nn.Upsample(scale_factor=2, mode='trilinear', align_corners=True)
            self.conv = block(in_channels_1+in_channels_2, out_channels,
                              norm_layer=norm_layer, act=act)
        else:
            self.up = nn.ConvTranspose3d(in_channels_1 , in_channels_1 // 2, kernel_size=2, stride=2)
            self.conv = block(in_channels_2+in_channels_1//2, out_channels,
                              norm_layer=norm_layer, act=act)

    def forward(self, x1, x2):

        x1 = self.up(x1)
        # input is CHW
        diffZ = x2.size()[2] - x1.size()[2]
        diffY = x2.size()[3] - x1.size()[3]
        diffX = x2.size()[4] - x1.size()[4]

        x1 = F.pad(x1, [diffX // 2, diffX - diffX // 2,
                        diffY // 2, diffY - diffY // 2,
                        diffZ // 2, diffZ - diffZ // 2])

        x = torch.cat([x2, x1], dim=1)
        return self.conv(x)

# Cell
class OutConv(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(OutConv, self).__init__()
        self.conv = nn.Conv3d(in_channels, out_channels, kernel_size=1)
        self.act = nn.Softmax(dim=1)

    def forward(self, x):
        x = self.conv(x)
        return self.act(x)

class OutDuoubleRes(nn.Module):
    def __init__(self, in_channels, out_channels, mid_channels=None, norm_layer=nn.BatchNorm3d, act=nn.ReLU):
        super(OutDuoubleRes, self).__init__()
        if mid_channels is None: mid_channels = in_channels // 4
        self.conv =  nn.Sequential(
            # 1st Block
            nn.Conv3d(in_channels, mid_channels, kernel_size = 1, stride = 1, bias = False),
            norm_layer(mid_channels, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True),
            act(inplace=True),

            nn.Conv3d(mid_channels, mid_channels, kernel_size = 3, stride = 1, padding = 1, bias = False),
            norm_layer(mid_channels, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True),
            act(inplace=True),

            nn.Conv3d(mid_channels, mid_channels, kernel_size = 1, stride = 1, bias = False),
            norm_layer(mid_channels, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True),
            act(inplace=True),

            # 2nd Block
            nn.Conv3d(mid_channels, out_channels, kernel_size = 1, stride = 1, bias = False),
            norm_layer(out_channels, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True),
            act(inplace=True),

            nn.Conv3d(out_channels, out_channels, kernel_size = 3, stride = 1, padding = 1, bias = False),
            norm_layer(out_channels, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True),
            act(inplace=True),

            nn.Conv3d(out_channels, out_channels, kernel_size = 1, stride = 1, bias = False),
            norm_layer(out_channels, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        self.act = nn.Softmax(dim=1)

    def forward(self, x):
        x = self.conv(x)
        return self.act(x)

# Cell
class AbstractUNet3D(nn.Module):
    "Abstract base class of UNet, should be subclassed by all UNets"
    def __init__(self):
        super(AbstractUNet3D, self).__init__()

    def forward(self, input):
        x1, x2, x3, x4, x5 = self.encoder(input)
        x = self.up1(x5, x4)
        x = self.up2(x, x3)
        x = self.up3(x, x2)
        x = self.up4(x, x1)
        logits = self.outc(x)
        return logits

# Cell
class UResNet3D(AbstractUNet3D):
    def __init__(self, backbone, n_channels, n_classes, trilinear=False, norm_layer=nn.BatchNorm3d):
        super(UResNet3D, self).__init__()
        self.encoder=build_backbone(backbone, n_channels=n_channels, output_stride=16,
                                    block=DoubleResBlock, norm_layer=norm_layer, act=nn.ReLU)

        ## BasicBlock leads to smaller channelsize, how to correct this wisely??
        in_channels = 512 if isinstance(self.encoder.layer1[0], BasicBlock3d) else 2048

        self.up1 = Up(in_channels, in_channels // 2, trilinear=trilinear, block=block,
                      norm_layer=norm_layer, act=act)
        in_channels = in_channels // 2
        self.up2 = Up(in_channels, in_channels // 2, trilinear=trilinear, block=block,
                      norm_layer=norm_layer, act=act)
        in_channels = in_channels // 2
        self.up3 =Up(in_channels, in_channels // 2, trilinear=trilinear, block=block,
                     norm_layer=norm_layer, act=act)
        in_channels = in_channels // 2
        self.up4 = Up(in_channels, in_channels // 2, trilinear=trilinear, block=block,
                      norm_layer=norm_layer, act=act)
        self.outc = OutDuoubleRes(in_channels // 2, n_classes)


class UResNet3D_2(AbstractUNet3D):
    def __init__(self, n_channels, n_classes, trilinear=True,
                 block=DoubleResBlock, norm_layer=nn.BatchNorm3d, act=nn.ReLU):
        super(UResNet3D_2, self).__init__()

        self.inc = DoubleConv(n_channels, 64, norm_layer=norm_layer, act=act)
        self.down1 = Down(64, 128, block=block, norm_layer=norm_layer, act=act)
        self.down2 = Down(128, 256, block=block, norm_layer=norm_layer, act=act)
        self.down3 = Down(256, 512, block=block, norm_layer=norm_layer, act=act)
        self.down4 = Down(512, 1024, block=block, norm_layer=norm_layer, act=act)
        self.up1 = Up(1024, 512, trilinear=trilinear, block=block, norm_layer=norm_layer, act=act)
        self.up2 = Up(512, 256, trilinear=trilinear, block=block, norm_layer=norm_layer, act=act)
        self.up3 = Up(256, 128, trilinear=trilinear, block=block, norm_layer=norm_layer, act=act)
        self.up4 = Up(128, 64, trilinear=trilinear, block=block, norm_layer=norm_layer, act=act)
        self.outc = OutDuoubleRes(64, n_classes)

    def encoder(self, x):
        x1 = self.inc(x)
        x2 = self.down1(x1)
        x3 = self.down2(x2)
        x4 = self.down3(x3)
        x5 = self.down4(x4)
        return x1, x2, x3, x4, x5

# Cell
class DoubleUNet3D(nn.Module):
    def __init__(self, backbone, n_channels, n_classes, trilinear=False,
                 norm_layer=nn.BatchNorm3d, act=nn.ReLU):
        store_attr()
        super(DoubleUNet3D, self).__init__()
        self.encoder1=build_backbone(backbone, n_channels=self.n_channels, output_stride=16, norm_layer=norm_layer)
        self.encoder2=build_backbone(backbone, n_channels=self.n_channels, output_stride=16, norm_layer=norm_layer)

        ## BasicBlock leads to smaller channelsize, how to correct this wisely??
        in_channels = 512 if isinstance(self.encoder1.layer1[0], BasicBlock3d) else 2048

        self.aspp1 = ASPP(in_channels, [1,6,12,18], 256, norm_layer)
        self.aspp2 = ASPP(in_channels, [1,6,12,18], 256, norm_layer)

        self.up1a = Up(256, in_channels // 2, trilinear=self.trilinear,
                       norm_layer=norm_layer, act=act)
        self.up1b = Up(256, in_channels, trilinear=self.trilinear,
                       norm_layer=norm_layer, act=act)

        in_channels = in_channels // 2
        self.up2a = Up(128, in_channels // 2, trilinear=self.trilinear,
                       norm_layer=norm_layer, act=act)
        self.up2b = Up(128, in_channels, trilinear=self.trilinear,
                       norm_layer=norm_layer, act=act)

        in_channels = in_channels // 2
        self.up3a = Up(64, in_channels // 2, trilinear=self.trilinear,
                       norm_layer=norm_layer, act=act)
        self.up3b = Up(64, in_channels, trilinear=self.trilinear,
                       norm_layer=norm_layer, act=act)

        in_channels = in_channels // 2
        self.up4a = Up(32, in_channels // 2, trilinear=self.trilinear,
                       norm_layer=norm_layer, act=act)
        self.up4b = Up(32, in_channels, trilinear=self.trilinear,
                       norm_layer=norm_layer, act=act)

        self.outc1 = OutConv(16, self.n_classes)
        self.outc2 = OutConv(16, self.n_classes)
        self.outc3 = OutConv(self.n_classes * 2, self.n_classes)

    def forward(self, input):
        x1a, x2a, x3a, x4a, x5a = self.encoder1(input)
        x = self.aspp1(x5a)
        x = self.up1a(x, x4a)
        x = self.up2a(x, x3a)
        x = self.up3a(x, x2a)
        x = self.up4a(x, x1a)
        out1 = self.outc1(x)

        input = torch.stack((torch.mean(out1, 1), )*self.n_channels, 1) * input
        x1b, x2b, x3b, x4b, x5b = self.encoder2(input)
        x = self.aspp1(x5b)
        x = self.up1b(x, torch.cat((x4a,x4b),1))
        x = self.up2b(x, torch.cat((x3a,x3b),1))
        x = self.up3b(x, torch.cat((x2a,x2b),1))
        x = self.up4b(x, torch.cat((x1a,x1b),1))
        out2 = self.outc2(x)

        return self.outc3(torch.cat((out1, out2), 1))

# Cell
class FPN(nn.Module):
    def __init__(self, input_channels:list, output_channels:list, norm_layer, act=nn.ReLU):
        super().__init__()
        self.convs = nn.ModuleList(
            [nn.Sequential(nn.Conv3d(in_ch, out_ch*2, kernel_size=3, padding=1),
             act(inplace=True),
             norm_layer(out_ch*2),
             nn.Conv3d(out_ch*2, out_ch, kernel_size=3, padding=1))
            for in_ch, out_ch in zip(input_channels, output_channels)])

    def forward(self, xs:list, last_layer):
        hcs = [F.interpolate(c(x),size=last_layer.shape[-3:],mode='trilinear')
               for i,(c,x) in enumerate(zip(self.convs, xs))]
        hcs.append(last_layer)
        return torch.cat(hcs, dim=1)


class UneXt50(nn.Module):
    def __init__(self, backbone, n_channels, n_classes, stride=1,
                 norm_layer=nn.BatchNorm3d, act=nn.ReLU, **kwargs):
        super().__init__()
        self.encoder=build_backbone(backbone, n_channels=n_channels,
                                    norm_layer=norm_layer, output_stride=16)

        factor = 4 if isinstance(self.encoder.layer1[0], BasicBlock3d) else 1
        #aspp with customized dilatations
        self.aspp = ASPP(in_channels=2048//factor, dilations=[stride*1,stride*2,stride*3,stride*4], out_channels=512, norm_layer=norm_layer)
        self.drop_aspp = nn.Dropout3d(0.5)
        #decoder
        self.dec4 = Up(512,1024//factor,256, norm_layer=norm_layer, act=act)
        self.dec3 = Up(256,512//factor,128, norm_layer=norm_layer, act=act)
        self.dec2 = Up(128,256//factor,64, norm_layer=norm_layer, act=act)
        self.dec1 = Up(64,128//factor,32, norm_layer=norm_layer, act=act)
        self.fpn = FPN([512,256,128,64],[16]*4, norm_layer=norm_layer, act=act)
        self.drop = nn.Dropout3d(0.1)
        self.final_conv = OutConv(32+16*4, n_classes)

    def forward(self, x):
        enc0, enc1, enc2, enc3, enc4 = self.encoder(x)
    #    print(enc0.shape, enc1.shape, enc2.shape, enc3.shape, enc4.shape)

        enc5 = self.aspp(enc4)
        dec3 = self.dec4(self.drop_aspp(enc5),enc3)
        dec2 = self.dec3(dec3,enc2)
        dec1 = self.dec2(dec2,enc1)
        dec0 = self.dec1(dec1,enc0)

        x = self.fpn([enc5, dec3, dec2, dec1], dec0)
        x = self.drop(x)
        x = self.final_conv(x)
        return x

# Cell
class TinyUNet(nn.Module):
    def __init__(self, n_channels, n_classes, trilinear=True,
                 block=DoubleResBlock, norm_layer=nn.BatchNorm3d, act=nn.ReLU):
        super(TinyUNet, self).__init__()

        self.inc = DoubleConv(n_channels, 64, norm_layer=norm_layer, act=act)
        self.down1 = Down(64, 128, block=block, norm_layer=norm_layer, act=act)
        self.down2 = Down(128, 256, block=block, norm_layer=norm_layer, act=act)
        self.down3 = Down(256, 512, block=block, norm_layer=norm_layer, act=act)

        self.up2 = Up(512, 256, trilinear=trilinear, block=block, norm_layer=norm_layer, act=act)
        self.up3 = Up(256, 128, trilinear=trilinear, block=block, norm_layer=norm_layer, act=act)
        self.up4 = Up(128, 64, trilinear=trilinear, block=block, norm_layer=norm_layer, act=act)
        self.outc = OutDuoubleRes(64, n_classes)

    def forward(self, x):
        x1 = self.inc(x)
        x2 = self.down1(x1)
        x3 = self.down2(x2)
        x4 = self.down3(x3)


        x = self.up2(x4, x3)
        x = self.up3(x, x2)
        x = self.up4(x, x1)
        logits = self.outc(x)
        return logits