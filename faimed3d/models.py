# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/04-designing-a-3D-CNN.ipynb (unless otherwise specified).

__all__ = ['AlexNet_3D', 'alexnet_3d']

# Cell
# export

import torchvision
from torch import nn

# Cell
# https://github.com/Ontheroad123/ImageNet/blob/master/torch-alexnet-3D.py

class AlexNet_3D(nn.Module):

    def __init__(self, num_classes=2, n_dim=7):
        super(AlexNet_3D, self).__init__()
        self.features = nn.Sequential(
            nn.Conv3d(n_dim, 512, kernel_size=(5,5,1), stride=(2,2,1), padding=(2,2,1)),
            nn.LeakyReLU(inplace = True), #    nn.ReLU(inplace=True),
            nn.MaxPool3d(kernel_size=(3,3,1), stride=(2,2,1)),

            nn.Conv3d(512, 256, kernel_size=(5,5,3), padding=(2,2,1)),
            nn.LeakyReLU(inplace = True), #    nn.ReLU(inplace=True),
            nn.Dropout(p = 0.8),
            nn.MaxPool3d(kernel_size=(3,3,1), stride=(2,2,1)),

            nn.BatchNorm3d(256),
            nn.Conv3d(256, 128, kernel_size=(5,5,3), padding=(2,2,1)),
            nn.LeakyReLU(inplace = True), #    nn.ReLU(inplace=True),
            nn.Dropout(p = 0.8),
            nn.MaxPool3d(kernel_size=(3,3,1), stride=(2,2,1)),

            nn.BatchNorm3d(128),
            nn.Conv3d(128, 384, kernel_size=(3,3,3), padding=(1,1,1)),
            nn.LeakyReLU(inplace = True), #    nn.ReLU(inplace=True),

            nn.BatchNorm3d(384),
            nn.Conv3d(384, 256, kernel_size=(3,3,3), padding=(1,1,1)),
            nn.LeakyReLU(inplace = True), #    nn.ReLU(inplace=True),

            nn.BatchNorm3d(256),
            nn.Conv3d(256, 256, kernel_size=(3,3,3), padding=(1,1,1)),
            nn.LeakyReLU(inplace = True), #    nn.ReLU(inplace=True),
            nn.MaxPool3d(kernel_size=(3,3,1), stride=(2,2,1)),
        )
        self.classifier = nn.Sequential(
            nn.Linear(11520, 4096), #6 * 6* 4, 4096),
            nn.LeakyReLU(inplace = True), #    nn.ReLU(inplace=True),
            nn.Linear(4096, 512),
            nn.LeakyReLU(inplace = True), #    nn.ReLU(inplace=True),
            nn.Linear(512, num_classes),
        )

    def forward(self, x):
        x = self.features(x)
        x = x.view(x.size(0),x.size(1)*x.size(2)*x.size(3)*x.size(4) ) #6 * 6 * 4)
        x = self.classifier(x)
        return x


def alexnet_3d(pretrained=False, progress=True, **kwargs):
    r"""3D AlexNet model architecture, adapted from https://github.com/Ontheroad123/ImageNet/blob/master/torch-alexnet-3D.py

    Args:
        pretrained (bool): If True, returns a model pre-trained on ImageNet
        progress (bool): If True, displays a progress bar of the download to stderr
    """
    model = AlexNet_3D(**kwargs)
    if pretrained:
        "currently no pretained weights for 3D Alexnet available"
        pass
    return model